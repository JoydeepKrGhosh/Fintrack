generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id           Int           @id @default(autoincrement())
  name         String        @unique @db.VarChar(50)
  transactions Transaction[]
}

model DebtSimulation {
  id              Int      @id @default(autoincrement())
  userId          String?
  debts           Json
  monthlyPayment  Decimal  @db.Decimal(12, 2)
  avalancheResult Json
  snowballResult  Json
  createdAt       DateTime @default(now())
  user            User?    @relation(fields: [userId], references: [id])
}

model Debt {
  id             Int      @id @default(autoincrement())
  userId         String?
  name           String   @db.VarChar(255)
  balance        Decimal  @db.Decimal(12, 2)
  interestRate   Decimal  @db.Decimal(5, 2)
  minimumPayment Decimal  @db.Decimal(12, 2)
  createdAt      DateTime @default(now())
  user           User?    @relation(fields: [userId], references: [id])
}

model Merchant {
  id             Int           @id @default(autoincrement())
  name           String        @unique
  normalizedName String        @unique
  category       String?
  transactions   Transaction[]
}

model PlayingWithNeon {
  id    Int    @id @default(autoincrement())
  name  String
  value Float? @db.Real
}

model TransactionMetadata {
  id               String      @id @default(uuid())
  transactionId    String      @unique
  productDetails   String?
  transactionType  String?     @db.VarChar(10)
  paymentMode      String?     @db.VarChar(20)
  matchStatus      String?     @default("PENDING")
  matchExpiresAt   DateTime?
  isDebt           Boolean?    @default(false)
  isSubscription   Boolean?    @default(false)
  debtType         String?     @db.VarChar(30)
  subscriptionType String?     @db.VarChar(30)
  interestRate     Decimal?    @db.Decimal(5, 2)
  dueDate          DateTime?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  transaction      Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
}

model Transaction {
  id              String               @id @default(uuid())
  userId          String
  rawText         String
  extractedAmount Decimal              @db.Decimal(10, 2)
  currency        String               @default("INR") @db.VarChar(3)
  transactionDate DateTime
  sourceType      String               @db.VarChar(10)
  sourceId        String?              @unique
  senderInfo      String?
  isProcessed     Boolean              @default(false)
  isDuplicate     Boolean              @default(false)
  solanaTxHash    String?              @db.VarChar(64)
  receivedAt      DateTime             @default(now())
  updatedAt       DateTime             @default(now()) @updatedAt
  categoryId      Int?
  merchantId      Int?
  category        Category?            @relation(fields: [categoryId], references: [id])
  merchant        Merchant?            @relation(fields: [merchantId], references: [id])
  user            User                 @relation(fields: [userId], references: [id])
  metadata        TransactionMetadata?

  @@index([userId, isProcessed])
  @@index([userId, transactionDate])
}

model Token {
  id                String @id @default(uuid())
  userId            String @unique
  user              User   @relation(fields: [userId], references: [id])
  accessToken       String
  refreshToken      String
  accessTokenExpiry BigInt
}

model User {
  id                      String                   @id @default(uuid())
  name                    String                   @db.VarChar(100)
  email                   String                   @unique @db.VarChar(100)
  createdAt               DateTime                 @default(now())
  mobileNumber            String                   @unique @db.Char(10)
  googleId                String                   @unique
  debts                   Debt[]
  debtSimulations         DebtSimulation[]
  financialScoreSnapshots FinancialScoreSnapshot[]
  transactions            Transaction[]
  userDebts               UserDebt[]
  Token                   Token?
}

model UserDebt {
  id                Int      @id @default(autoincrement())
  userId            String
  loanType          String
  monthlyEmi        Float
  outstandingAmount Float
  interestRate      Float
  startDate         DateTime
  tenureMonths      Int
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FinancialScoreSnapshot {
  id                Int        @id @default(autoincrement())
  userId            String
  financialScore    Int
  savingsRate       Decimal    @db.Decimal(5, 4)
  debtToIncomeRatio Decimal    @db.Decimal(5, 4)
  essNonEssRatio    Decimal    @db.Decimal(6, 2)
  highExpenseFlag   Boolean
  income            Decimal    @db.Decimal(12, 2)
  disposableIncome  Decimal    @db.Decimal(12, 2)
  essentialSpend    Decimal    @db.Decimal(10, 2)
  nonEssentialSpend Decimal    @db.Decimal(10, 2)
  totalExpenses     Decimal    @db.Decimal(10, 2)
  occupation        Occupation
  cityTier          CityTier
  ageGroup          AgeGroup
  periodType        PeriodType @default(monthly)
  periodStart       DateTime
  periodEnd         DateTime
  createdAt         DateTime   @default(now())
  user              User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([periodStart, periodEnd])
}

enum Occupation {
  Student
  Retired
  Self_Employed
  Salaried
  Freelancer
  Other
}

enum CityTier {
  Tier_1
  Tier_2
  Tier_3
}

enum AgeGroup {
  UNDER_25
  FROM_25_TO_40
  FROM_40_TO_60
  ABOVE_60
}

enum PeriodType {
  monthly
  quarterly
  yearly
}
